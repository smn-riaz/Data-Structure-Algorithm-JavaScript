// An algorithm is a set of well-defined instructions to solve a particular problem.

// There are many ways to solve one problem

// We evaluate the performance of an algorithm in terms of its input size


// Time complexity : Amount of time taken by an algorithm to run, as a function of input size

// Space complexity : Amount of memory taken by an algorithm to run, as a function of input size


// Asymptomatic notations - Mathematical tools to represent time and space complexity
// 1. Big - O Notation (O-notation) - worst case complexity
// 2. Omeega Notation - Best complexity
// 3. Theta Notation - Average case complexity


// Big - O notation describes the complexity of an algorithm using algebraic terms


// Big - O Time complexity count down

O(n) - Linear
O(1) - Constant
O(n^2) - Quadratic
O(n^3) - Cubic
O(logn) - Logarithmic



// Space complexity 
O(n) - Linear
O(1) - Constant
O(logn) - Logarithmic






// Objects - Big-O
Insert- O(1)
Remove- O(1)
Access - O(1)
Search - O(n)
Objects.keys() - O(n)
Objects.values() - O(n)
Objects.entries() - O(n)



// Array - Big-O
Insert/remove at end - O(1)
Insert/remove at begining - O(n)    ; as every indexes have to be changed
Access - O(1)
Search - O(n)
Push/pop - O(1)
Shift/unshift/concat/slice/splice - O(n)
forEach/map/filter/reduce - O(n)